/**
 *  Project Euler, 002
 *  
 *  Copyright (c) 2020, Elieder Sousa
 *  eliedersousa<at>gmail<dot>com
 *  
 *  @date     30/07/20
 *  
 *  @brief    	"Even Fibonacci numbers"
		Problem 2

		Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
                By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
		By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
                find the sum of the even-valued terms.

 */

/* Assuming F(n) the nth term of sequence (F(0)=1, F(1)=2, F(2)=3, F(3)=5, F(4)=8... )
We can clearly see that every F(n) that n ≡ 1 (mod 3) is even.

Proof:
F(0)=odd, F(1)=even, F(2)=odd, F(3)=odd, F(4)=even
To be even, two odds need to be added. The first odd come from (odd+even) sum. The second odd come from (even+odd).
Hence the third sum will be (odd+odd), and the cycle restarts.
Since the first even is F(1), the next even will be F(1+3) ↔ F(4) ↔ F(n ≡ 1 (mod 3)) for every n
This fact can improve some loops to run 3 times faster.

BUT... we can get the next even number multiplying by 4.2360679774997176967001439604968 , and performing a ROUND operation.
The number 4.23... is PHI^3, since the ratio of every consecutive number is near PHI.
We are searching numbers 3 positions apart, so we can take the cube of PHI to do the math.
F(4) = ROUND( F(1) * 4.2360679774997176967001439604968 ) */

let sum = 0;
let n = 2;
while( n <= 4000000 ) {
  sum += n;
  n = Math.round( n * 4.2360679774997176967001439604968 );
}
console.log( sum ); // Result. (I will not reveal it, go and try yourself.)
